
GRADUATION_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000dac  00000e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800068  00800068  00000e48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ca  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bed  00000000  00000000  000034a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001200  00000000  00000000  00004093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00005294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001274  00000000  00000000  0000602b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000729f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_9>
  28:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_10>
  2c:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_13>
  38:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
  8a:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
  96:	8f e1       	ldi	r24, 0x1F	; 31
  98:	87 bb       	out	0x17, r24	; 23
	DDRC=DIO_U8_PORTC_DIR;
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	84 bb       	out	0x14, r24	; 20
	DDRD=DIO_U8_PORTD_DIR;
  9e:	82 e3       	ldi	r24, 0x32	; 50
  a0:	81 bb       	out	0x11, r24	; 17
  a2:	08 95       	ret

000000a4 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	00 f5       	brcc	.+64     	; 0xe8 <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  a8:	66 23       	and	r22, r22
  aa:	81 f0       	breq	.+32     	; 0xcc <DIO_voidSetPinValue+0x28>
  ac:	61 30       	cpi	r22, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <DIO_voidSetPinValue+0xe>
  b0:	81 c0       	rjmp	.+258    	; 0x1b4 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  b2:	4b b3       	in	r20, 0x1b	; 27
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_voidSetPinValue+0x1c>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_voidSetPinValue+0x18>
  c4:	cb 01       	movw	r24, r22
  c6:	84 2b       	or	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
  cc:	4b b3       	in	r20, 0x1b	; 27
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinValue+0x36>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinValue+0x32>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	08 f5       	brcc	.+66     	; 0x12e <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
  ec:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
  ee:	66 23       	and	r22, r22
  f0:	81 f0       	breq	.+32     	; 0x112 <DIO_voidSetPinValue+0x6e>
  f2:	61 30       	cpi	r22, 0x01	; 1
  f4:	09 f0       	breq	.+2      	; 0xf8 <DIO_voidSetPinValue+0x54>
  f6:	5e c0       	rjmp	.+188    	; 0x1b4 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
  f8:	48 b3       	in	r20, 0x18	; 24
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinValue+0x62>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinValue+0x5e>
 10a:	cb 01       	movw	r24, r22
 10c:	84 2b       	or	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
 112:	48 b3       	in	r20, 0x18	; 24
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinValue+0x7c>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	8a 95       	dec	r24
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinValue+0x78>
 124:	cb 01       	movw	r24, r22
 126:	80 95       	com	r24
 128:	84 23       	and	r24, r20
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 12e:	88 31       	cpi	r24, 0x18	; 24
 130:	00 f5       	brcc	.+64     	; 0x172 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 132:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 134:	66 23       	and	r22, r22
 136:	79 f0       	breq	.+30     	; 0x156 <DIO_voidSetPinValue+0xb2>
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	e1 f5       	brne	.+120    	; 0x1b4 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinValue+0xa6>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinValue+0xa2>
 14e:	cb 01       	movw	r24, r22
 150:	84 2b       	or	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 156:	45 b3       	in	r20, 0x15	; 21
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinValue+0xc0>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinValue+0xbc>
 168:	cb 01       	movw	r24, r22
 16a:	80 95       	com	r24
 16c:	84 23       	and	r24, r20
 16e:	85 bb       	out	0x15, r24	; 21
 170:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 172:	80 32       	cpi	r24, 0x20	; 32
 174:	f8 f4       	brcc	.+62     	; 0x1b4 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 176:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 178:	66 23       	and	r22, r22
 17a:	79 f0       	breq	.+30     	; 0x19a <DIO_voidSetPinValue+0xf6>
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	d1 f4       	brne	.+52     	; 0x1b4 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 180:	42 b3       	in	r20, 0x12	; 18
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinValue+0xea>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinValue+0xe6>
 192:	cb 01       	movw	r24, r22
 194:	84 2b       	or	r24, r20
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 19a:	42 b3       	in	r20, 0x12	; 18
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	b9 01       	movw	r22, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_voidSetPinValue+0x104>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_voidSetPinValue+0x100>
 1ac:	cb 01       	movw	r24, r22
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	08 95       	ret

000001b6 <GO_FORWARD>:
{
	/*DIO_voidSetPinValue( H_EN1 , LOW );
	DIO_voidSetPinValue( H_EN2 , LOW );
	_delay_ms(700);*/
	
	DIO_voidSetPinValue( H_A1 , HIGH );
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	83 e1       	ldi	r24, 0x13	; 19
 1ba:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	84 e1       	ldi	r24, 0x14	; 20
 1c2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH );
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	85 e1       	ldi	r24, 0x15	; 21
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	86 e1       	ldi	r24, 0x16	; 22
 1d2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8c e1       	ldi	r24, 0x1C	; 28
 1da:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 ,HIGH );	
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	8d e1       	ldi	r24, 0x1D	; 29
 1e2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 1e6:	08 95       	ret

000001e8 <STOP>:
	STOP();
}

void STOP (void)
{
	DIO_voidSetPinValue( H_EN1 , LOW );
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	8c e1       	ldi	r24, 0x1C	; 28
 1ec:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , LOW );
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	8d e1       	ldi	r24, 0x1D	; 29
 1f4:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
		
	DIO_voidSetPinValue( H_A1 , LOW );
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	83 e1       	ldi	r24, 0x13	; 19
 1fc:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	85 e1       	ldi	r24, 0x15	; 21
 20c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	86 e1       	ldi	r24, 0x16	; 22
 214:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 218:	08 95       	ret

0000021a <BACKWORD>:
	DIO_voidSetPinValue( H_EN2 ,HIGH );	
}

void BACKWORD (void)
{
	DIO_voidSetPinValue( H_A1 , LOW );
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	83 e1       	ldi	r24, 0x13	; 19
 21e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , HIGH );
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	84 e1       	ldi	r24, 0x14	; 20
 226:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	85 e1       	ldi	r24, 0x15	; 21
 22e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , HIGH );
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	86 e1       	ldi	r24, 0x16	; 22
 236:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8c e1       	ldi	r24, 0x1C	; 28
 23e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 ,HIGH );
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8d e1       	ldi	r24, 0x1D	; 29
 246:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	85 ea       	ldi	r24, 0xA5	; 165
 24e:	9e e0       	ldi	r25, 0x0E	; 14
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <BACKWORD+0x36>
 258:	00 c0       	rjmp	.+0      	; 0x25a <BACKWORD+0x40>
 25a:	00 00       	nop
	
	_delay_ms(300);	
	
	STOP();
 25c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <STOP>
 260:	08 95       	ret

00000262 <RETURN_180>:

}

void RETURN_180 (void)
{
	DIO_voidSetPinValue( H_EN1 , LOW );
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	8c e1       	ldi	r24, 0x1C	; 28
 266:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , LOW );
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	8d e1       	ldi	r24, 0x1D	; 29
 26e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	8d e2       	ldi	r24, 0x2D	; 45
 276:	92 e2       	ldi	r25, 0x22	; 34
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <RETURN_180+0x16>
 280:	00 c0       	rjmp	.+0      	; 0x282 <RETURN_180+0x20>
 282:	00 00       	nop
	_delay_ms(700);
	
	DIO_voidSetPinValue( H_A1 , LOW );  // RIGHT MOTOR BACKWORD
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	83 e1       	ldi	r24, 0x13	; 19
 288:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , HIGH ); // RIGHT MOTOR BACKWORD
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	84 e1       	ldi	r24, 0x14	; 20
 290:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH ); // LEFT MOTOR FORWORD
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	85 e1       	ldi	r24, 0x15	; 21
 298:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );	// LEFT MOTOR FORWORD
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	86 e1       	ldi	r24, 0x16	; 22
 2a0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH );
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	8c e1       	ldi	r24, 0x1C	; 28
 2a8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH );
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	8d e1       	ldi	r24, 0x1D	; 29
 2b0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	97 e2       	ldi	r25, 0x27	; 39
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <RETURN_180+0x58>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <RETURN_180+0x62>
 2c4:	00 00       	nop
	_delay_ms(800);						//DESIRED TIME TO ROTATE 180 
	
	STOP ();                                      
 2c6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <STOP>
 2ca:	08 95       	ret

000002cc <TURN_RIGHT>:
}

void TURN_RIGHT (void)
{
	DIO_voidSetPinValue( H_EN1 , LOW );
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	8c e1       	ldi	r24, 0x1C	; 28
 2d0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , LOW );
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	8d e1       	ldi	r24, 0x1D	; 29
 2d8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	85 ea       	ldi	r24, 0xA5	; 165
 2e0:	9e e0       	ldi	r25, 0x0E	; 14
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <TURN_RIGHT+0x16>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <TURN_RIGHT+0x20>
 2ec:	00 00       	nop
	_delay_ms(300);
	
	DIO_voidSetPinValue( H_A1 , LOW );
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	83 e1       	ldi	r24, 0x13	; 19
 2f2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	84 e1       	ldi	r24, 0x14	; 20
 2fa:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , HIGH );
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	85 e1       	ldi	r24, 0x15	; 21
 302:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	86 e1       	ldi	r24, 0x16	; 22
 30a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8c e1       	ldi	r24, 0x1C	; 28
 312:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	8d e1       	ldi	r24, 0x1D	; 29
 31a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	97 e2       	ldi	r25, 0x27	; 39
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <TURN_RIGHT+0x58>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <TURN_RIGHT+0x62>
 32e:	00 00       	nop
	_delay_ms(800);
	STOP ();  
 330:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <STOP>
 334:	08 95       	ret

00000336 <TURN_LEFT>:
}

void TURN_LEFT (void)
{
	DIO_voidSetPinValue( H_EN1 , LOW );
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	8c e1       	ldi	r24, 0x1C	; 28
 33a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , LOW );
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	8d e1       	ldi	r24, 0x1D	; 29
 342:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	85 ea       	ldi	r24, 0xA5	; 165
 34a:	9e e0       	ldi	r25, 0x0E	; 14
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <TURN_LEFT+0x16>
 354:	00 c0       	rjmp	.+0      	; 0x356 <TURN_LEFT+0x20>
 356:	00 00       	nop
	_delay_ms(300);
	
	DIO_voidSetPinValue( H_A1 , HIGH);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	83 e1       	ldi	r24, 0x13	; 19
 35c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A2 , LOW );
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	84 e1       	ldi	r24, 0x14	; 20
 364:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A3 , LOW );
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	85 e1       	ldi	r24, 0x15	; 21
 36c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_A4 , LOW );
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	86 e1       	ldi	r24, 0x16	; 22
 374:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	DIO_voidSetPinValue( H_EN1 , HIGH);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8c e1       	ldi	r24, 0x1C	; 28
 37c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( H_EN2 , HIGH);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8d e1       	ldi	r24, 0x1D	; 29
 384:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	8f e0       	ldi	r24, 0x0F	; 15
 38c:	97 e2       	ldi	r25, 0x27	; 39
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <TURN_LEFT+0x58>
 396:	00 c0       	rjmp	.+0      	; 0x398 <TURN_LEFT+0x62>
 398:	00 00       	nop
	_delay_ms(800);
	STOP ();  
 39a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <STOP>
 39e:	08 95       	ret

000003a0 <GIE_voidEnable>:


void GIE_voidEnable(void)
{
	//SET_BIT(SREG , SREG_I) ; // set I bit to enable the general interrupt enable
    __asm volatile ("SEI");/*Inline assembly syntax in GCC toolchain*/
 3a0:	78 94       	sei
 3a2:	08 95       	ret

000003a4 <LCD_voidSendData>:
	for (u8 i = 0 ; i<2 ; i++)
	{
		arr[i] += 48 ;
		LCD_voidSendData(arr[i]);
	}
}
 3a4:	cf 93       	push	r28
 3a6:	c8 2f       	mov	r28, r24
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	89 e0       	ldi	r24, 0x09	; 9
 3b4:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3b8:	c4 fd       	sbrc	r28, 4
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <LCD_voidSendData+0x22>
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <LCD_voidSendData+0x2a>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3ce:	c5 fd       	sbrc	r28, 5
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <LCD_voidSendData+0x38>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <LCD_voidSendData+0x40>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3e4:	c6 fd       	sbrc	r28, 6
 3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <LCD_voidSendData+0x4e>
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <LCD_voidSendData+0x56>
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 3fa:	cc 23       	and	r28, r28
 3fc:	2c f0       	brlt	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 406:	04 c0       	rjmp	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	8c e0       	ldi	r24, 0x0C	; 12
 414:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	8c e0       	ldi	r24, 0x0C	; 12
 428:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 42c:	8f e9       	ldi	r24, 0x9F	; 159
 42e:	9f e0       	ldi	r25, 0x0F	; 15
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	c0 fd       	sbrc	r28, 0
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 444:	04 c0       	rjmp	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 44e:	c1 fd       	sbrc	r28, 1
 450:	05 c0       	rjmp	.+10     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	85 e0       	ldi	r24, 0x05	; 5
 456:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 464:	c2 fd       	sbrc	r28, 2
 466:	05 c0       	rjmp	.+10     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 470:	04 c0       	rjmp	.+8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	86 e0       	ldi	r24, 0x06	; 6
 476:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 47a:	c3 fd       	sbrc	r28, 3
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 486:	04 c0       	rjmp	.+8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	87 e0       	ldi	r24, 0x07	; 7
 48c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	8c e0       	ldi	r24, 0x0C	; 12
 494:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	8c e0       	ldi	r24, 0x0C	; 12
 4a8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4ac:	8f e9       	ldi	r24, 0x9F	; 159
 4ae:	9f e0       	ldi	r25, 0x0F	; 15
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <LCD_voidSendCommand>:
 4bc:	cf 93       	push	r28
 4be:	c8 2f       	mov	r28, r24
 4c0:	60 e0       	ldi	r22, 0x00	; 0
 4c2:	8a e0       	ldi	r24, 0x0A	; 10
 4c4:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	89 e0       	ldi	r24, 0x09	; 9
 4cc:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4d0:	c4 fd       	sbrc	r28, 4
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <LCD_voidSendCommand+0x22>
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <LCD_voidSendCommand+0x2a>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	84 e0       	ldi	r24, 0x04	; 4
 4e2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4e6:	c5 fd       	sbrc	r28, 5
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <LCD_voidSendCommand+0x38>
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	85 e0       	ldi	r24, 0x05	; 5
 4ee:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <LCD_voidSendCommand+0x40>
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	85 e0       	ldi	r24, 0x05	; 5
 4f8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 4fc:	c6 fd       	sbrc	r28, 6
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <LCD_voidSendCommand+0x4e>
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	86 e0       	ldi	r24, 0x06	; 6
 504:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 508:	04 c0       	rjmp	.+8      	; 0x512 <LCD_voidSendCommand+0x56>
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 512:	cc 23       	and	r28, r28
 514:	2c f0       	brlt	.+10     	; 0x520 <LCD_voidSendCommand+0x64>
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	87 e0       	ldi	r24, 0x07	; 7
 51a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 51e:	04 c0       	rjmp	.+8      	; 0x528 <LCD_voidSendCommand+0x6c>
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	8c e0       	ldi	r24, 0x0C	; 12
 52c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 530:	8f e9       	ldi	r24, 0x9F	; 159
 532:	9f e0       	ldi	r25, 0x0F	; 15
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <LCD_voidSendCommand+0x78>
 538:	00 c0       	rjmp	.+0      	; 0x53a <LCD_voidSendCommand+0x7e>
 53a:	00 00       	nop
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	8c e0       	ldi	r24, 0x0C	; 12
 540:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 544:	8f e9       	ldi	r24, 0x9F	; 159
 546:	9f e0       	ldi	r25, 0x0F	; 15
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCD_voidSendCommand+0x8c>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_voidSendCommand+0x92>
 54e:	00 00       	nop
 550:	c0 fd       	sbrc	r28, 0
 552:	05 c0       	rjmp	.+10     	; 0x55e <LCD_voidSendCommand+0xa2>
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 55c:	04 c0       	rjmp	.+8      	; 0x566 <LCD_voidSendCommand+0xaa>
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 566:	c1 fd       	sbrc	r28, 1
 568:	05 c0       	rjmp	.+10     	; 0x574 <LCD_voidSendCommand+0xb8>
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 572:	04 c0       	rjmp	.+8      	; 0x57c <LCD_voidSendCommand+0xc0>
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	85 e0       	ldi	r24, 0x05	; 5
 578:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 57c:	c2 fd       	sbrc	r28, 2
 57e:	05 c0       	rjmp	.+10     	; 0x58a <LCD_voidSendCommand+0xce>
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	86 e0       	ldi	r24, 0x06	; 6
 584:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 588:	04 c0       	rjmp	.+8      	; 0x592 <LCD_voidSendCommand+0xd6>
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	86 e0       	ldi	r24, 0x06	; 6
 58e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 592:	c3 fd       	sbrc	r28, 3
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <LCD_voidSendCommand+0xe4>
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	87 e0       	ldi	r24, 0x07	; 7
 59a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <LCD_voidSendCommand+0xec>
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	87 e0       	ldi	r24, 0x07	; 7
 5a4:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	8c e0       	ldi	r24, 0x0C	; 12
 5ac:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 5b0:	8f e9       	ldi	r24, 0x9F	; 159
 5b2:	9f e0       	ldi	r25, 0x0F	; 15
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <LCD_voidSendCommand+0xf8>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <LCD_voidSendCommand+0xfe>
 5ba:	00 00       	nop
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
 5c4:	8f e9       	ldi	r24, 0x9F	; 159
 5c6:	9f e0       	ldi	r25, 0x0F	; 15
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_voidSendCommand+0x10c>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_voidSendCommand+0x112>
 5ce:	00 00       	nop
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <LCD_voidInit>:
 5d4:	2f e7       	ldi	r18, 0x7F	; 127
 5d6:	85 eb       	ldi	r24, 0xB5	; 181
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <LCD_voidInit+0x6>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <LCD_voidInit+0x10>
 5e4:	00 00       	nop
 5e6:	83 e3       	ldi	r24, 0x33	; 51
 5e8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 5ec:	8f e3       	ldi	r24, 0x3F	; 63
 5ee:	9f e1       	ldi	r25, 0x1F	; 31
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCD_voidInit+0x1c>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_voidInit+0x22>
 5f6:	00 00       	nop
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 5fe:	8f e3       	ldi	r24, 0x3F	; 63
 600:	9f e1       	ldi	r25, 0x1F	; 31
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <LCD_voidInit+0x2e>
 606:	00 c0       	rjmp	.+0      	; 0x608 <LCD_voidInit+0x34>
 608:	00 00       	nop
 60a:	88 e2       	ldi	r24, 0x28	; 40
 60c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 610:	8f e3       	ldi	r24, 0x3F	; 63
 612:	9f e1       	ldi	r25, 0x1F	; 31
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <LCD_voidInit+0x40>
 618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_voidInit+0x46>
 61a:	00 00       	nop
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 622:	8f e3       	ldi	r24, 0x3F	; 63
 624:	9f e1       	ldi	r25, 0x1F	; 31
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <LCD_voidInit+0x52>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <LCD_voidInit+0x58>
 62c:	00 00       	nop
 62e:	86 e0       	ldi	r24, 0x06	; 6
 630:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 634:	8f e3       	ldi	r24, 0x3F	; 63
 636:	9f e1       	ldi	r25, 0x1F	; 31
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_voidInit+0x64>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <LCD_voidInit+0x6a>
 63e:	00 00       	nop
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 646:	8f e3       	ldi	r24, 0x3F	; 63
 648:	9f e1       	ldi	r25, 0x1F	; 31
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <LCD_voidInit+0x76>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <LCD_voidInit+0x7c>
 650:	00 00       	nop
 652:	08 95       	ret

00000654 <LCD_voidSendString>:
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	8c 01       	movw	r16, r24
 65c:	c0 e0       	ldi	r28, 0x00	; 0
 65e:	03 c0       	rjmp	.+6      	; 0x666 <LCD_voidSendString+0x12>
 660:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendData>
 664:	cf 5f       	subi	r28, 0xFF	; 255
 666:	f8 01       	movw	r30, r16
 668:	ec 0f       	add	r30, r28
 66a:	f1 1d       	adc	r31, r1
 66c:	80 81       	ld	r24, Z
 66e:	81 11       	cpse	r24, r1
 670:	f7 cf       	rjmp	.-18     	; 0x660 <LCD_voidSendString+0xc>
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	08 95       	ret

0000067a <LCD_voidSetCursor>:
 67a:	86 0f       	add	r24, r22
 67c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_voidSendCommand>
 680:	08 95       	ret

00000682 <LCD_voidClear>:

void LCD_voidClear(void)
{
 682:	cf 93       	push	r28
		for(u8 t =0  ; t<16 ; t++)
 684:	c0 e0       	ldi	r28, 0x00	; 0
 686:	08 c0       	rjmp	.+16     	; 0x698 <LCD_voidClear+0x16>
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
 688:	6c 2f       	mov	r22, r28
 68a:	80 e8       	ldi	r24, 0x80	; 128
 68c:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD_voidSetCursor>
			LCD_voidSendData(32);
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendData>
	}
}

void LCD_voidClear(void)
{
		for(u8 t =0  ; t<16 ; t++)
 696:	cf 5f       	subi	r28, 0xFF	; 255
 698:	c0 31       	cpi	r28, 0x10	; 16
 69a:	b0 f3       	brcs	.-20     	; 0x688 <LCD_voidClear+0x6>
 69c:	c0 e0       	ldi	r28, 0x00	; 0
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <LCD_voidClear+0x2e>
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
 6a0:	6c 2f       	mov	r22, r28
 6a2:	80 ec       	ldi	r24, 0xC0	; 192
 6a4:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD_voidSetCursor>
			LCD_voidSendData(32);
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendData>
		for(u8 t =0  ; t<16 ; t++)
		{
			LCD_voidSetCursor(LCD_U8_LINE1 ,t);
			LCD_voidSendData(32);
		}
		for(u8 t =0  ; t<16 ; t++)
 6ae:	cf 5f       	subi	r28, 0xFF	; 255
 6b0:	c0 31       	cpi	r28, 0x10	; 16
 6b2:	b0 f3       	brcs	.-20     	; 0x6a0 <LCD_voidClear+0x1e>
			LCD_voidSetCursor(LCD_U8_LINE2 ,t);
			LCD_voidSendData(32);
		}
	
	
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <__vector_9>:

f64 ULTRASONIC_f64Distance(void);
void CHECK (void);

ISR(TIMER1_OVF_vect)
{
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
	TimerOverflow++;		/* Increment Timer Overflow count */
 6c6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 6ca:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 6d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
}
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <ULTRASONIC_f64Distance>:
}

f64 ULTRASONIC_f64Distance(void)
{
	
	DIO_voidSetPinValue(DIO_U8_PIN8,DIO_U8_HIGH);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	88 e0       	ldi	r24, 0x08	; 8
 6ea:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ee:	25 e3       	ldi	r18, 0x35	; 53
 6f0:	2a 95       	dec	r18
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <ULTRASONIC_f64Distance+0xa>
 6f4:	00 00       	nop
	_delay_us(10);
	DIO_voidSetPinValue(DIO_U8_PIN8,DIO_U8_LOW);
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	88 e0       	ldi	r24, 0x08	; 8
 6fa:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinValue>
	
	
	TCNT1 = 0;			/* Clear Timer counter */
 6fe:	1d bc       	out	0x2d, r1	; 45
 700:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;		/* Setting for capture rising edge, No pre-scaler*/
 702:	81 e4       	ldi	r24, 0x41	; 65
 704:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
 706:	80 e2       	ldi	r24, 0x20	; 32
 708:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	88 bf       	out	0x38, r24	; 56

	

	/*Calculate width of Echo by Input Capture (ICP) on PortD PD6 */
	
	while ((TIFR & (1 << ICF1)) == 0);	/* Wait for rising edge */
 70e:	08 b6       	in	r0, 0x38	; 56
 710:	05 fe       	sbrs	r0, 5
 712:	fd cf       	rjmp	.-6      	; 0x70e <ULTRASONIC_f64Distance+0x28>
	TCNT1 = 0;			/* Clear Timer counter */
 714:	1d bc       	out	0x2d, r1	; 45
 716:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;		/* Setting for capture falling edge, No pre-scaler */
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;		/* Clear ICP flag (Input Capture flag) */
 71c:	80 e2       	ldi	r24, 0x20	; 32
 71e:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;		/* Clear Timer Overflow flag */
 720:	84 e0       	ldi	r24, 0x04	; 4
 722:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;	/* Clear Timer overflow count */
 724:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 728:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>

	while ((TIFR & (1 << ICF1)) == 0); /* Wait for falling edge */
 72c:	08 b6       	in	r0, 0x38	; 56
 72e:	05 fe       	sbrs	r0, 5
 730:	fd cf       	rjmp	.-6      	; 0x72c <ULTRASONIC_f64Distance+0x46>
	count = ICR1 + (65535 * TimerOverflow);	/* Take value of capture register */
 732:	66 b5       	in	r22, 0x26	; 38
 734:	77 b5       	in	r23, 0x27	; 39
 736:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <count+0x1>
 73a:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <count>
	/* 16MHz Timer freq, sound speed =343 m/s, calculation mentioned in doc. */
	distance = (double)count / 932.944;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__floatunsisf>
 746:	2a e6       	ldi	r18, 0x6A	; 106
 748:	3c e3       	ldi	r19, 0x3C	; 60
 74a:	49 e6       	ldi	r20, 0x69	; 105
 74c:	54 e4       	ldi	r21, 0x44	; 68
 74e:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
 752:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <distance>
 756:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <distance+0x1>
 75a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <distance+0x2>
 75e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <distance+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	91 ee       	ldi	r25, 0xE1	; 225
 766:	24 e0       	ldi	r18, 0x04	; 4
 768:	81 50       	subi	r24, 0x01	; 1
 76a:	90 40       	sbci	r25, 0x00	; 0
 76c:	20 40       	sbci	r18, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <ULTRASONIC_f64Distance+0x82>
 770:	00 c0       	rjmp	.+0      	; 0x772 <ULTRASONIC_f64Distance+0x8c>
 772:	00 00       	nop
	_delay_ms(100);
	
	return distance;
 774:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <distance>
 778:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <distance+0x1>
 77c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <distance+0x2>
 780:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <distance+0x3>
	
 784:	08 95       	ret

00000786 <CHECK>:
	}
}


void CHECK(void)
{
 786:	8f 92       	push	r8
 788:	9f 92       	push	r9
 78a:	af 92       	push	r10
 78c:	bf 92       	push	r11
 78e:	cf 92       	push	r12
 790:	df 92       	push	r13
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
	TIMER0_void_SetCompareVal(24);
 796:	88 e1       	ldi	r24, 0x18	; 24
 798:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER0_void_SetCompareVal>
 79c:	2f ef       	ldi	r18, 0xFF	; 255
 79e:	81 ee       	ldi	r24, 0xE1	; 225
 7a0:	94 e0       	ldi	r25, 0x04	; 4
 7a2:	21 50       	subi	r18, 0x01	; 1
 7a4:	80 40       	sbci	r24, 0x00	; 0
 7a6:	90 40       	sbci	r25, 0x00	; 0
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <CHECK+0x1c>
 7aa:	00 c0       	rjmp	.+0      	; 0x7ac <CHECK+0x26>
 7ac:	00 00       	nop
	_delay_ms(100);
	TIMER0_void_SetCompareVal(13);
 7ae:	8d e0       	ldi	r24, 0x0D	; 13
 7b0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER0_void_SetCompareVal>
	L_DISTANCE = ULTRASONIC_f64Distance();
 7b4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ULTRASONIC_f64Distance>
 7b8:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <L_DISTANCE>
 7bc:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <L_DISTANCE+0x1>
 7c0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <L_DISTANCE+0x2>
 7c4:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <L_DISTANCE+0x3>
 7c8:	2f ef       	ldi	r18, 0xFF	; 255
 7ca:	85 ea       	ldi	r24, 0xA5	; 165
 7cc:	9e e0       	ldi	r25, 0x0E	; 14
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	80 40       	sbci	r24, 0x00	; 0
 7d2:	90 40       	sbci	r25, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <CHECK+0x48>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <CHECK+0x52>
 7d8:	00 00       	nop
	_delay_ms(300);
	TIMER0_void_SetCompareVal(34);
 7da:	82 e2       	ldi	r24, 0x22	; 34
 7dc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER0_void_SetCompareVal>
	R_DISTANCE = ULTRASONIC_f64Distance();
 7e0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ULTRASONIC_f64Distance>
 7e4:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <R_DISTANCE>
 7e8:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <R_DISTANCE+0x1>
 7ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <R_DISTANCE+0x2>
 7f0:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <R_DISTANCE+0x3>
 7f4:	2f ef       	ldi	r18, 0xFF	; 255
 7f6:	85 ea       	ldi	r24, 0xA5	; 165
 7f8:	9e e0       	ldi	r25, 0x0E	; 14
 7fa:	21 50       	subi	r18, 0x01	; 1
 7fc:	80 40       	sbci	r24, 0x00	; 0
 7fe:	90 40       	sbci	r25, 0x00	; 0
 800:	e1 f7       	brne	.-8      	; 0x7fa <CHECK+0x74>
 802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 804:	00 00       	nop
	_delay_ms(300);
	TIMER0_void_SetCompareVal(24);
 806:	88 e1       	ldi	r24, 0x18	; 24
 808:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER0_void_SetCompareVal>
	
	if ((L_DISTANCE < 10.00 ) && (R_DISTANCE < 10.00))
 80c:	c0 90 7c 00 	lds	r12, 0x007C	; 0x80007c <L_DISTANCE>
 810:	d0 90 7d 00 	lds	r13, 0x007D	; 0x80007d <L_DISTANCE+0x1>
 814:	e0 90 7e 00 	lds	r14, 0x007E	; 0x80007e <L_DISTANCE+0x2>
 818:	f0 90 7f 00 	lds	r15, 0x007F	; 0x80007f <L_DISTANCE+0x3>
 81c:	20 e0       	ldi	r18, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	40 e2       	ldi	r20, 0x20	; 32
 822:	51 e4       	ldi	r21, 0x41	; 65
 824:	c7 01       	movw	r24, r14
 826:	b6 01       	movw	r22, r12
 828:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpsf2>
 82c:	88 23       	and	r24, r24
 82e:	ac f4       	brge	.+42     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 830:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <R_DISTANCE>
 834:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <R_DISTANCE+0x1>
 838:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <R_DISTANCE+0x2>
 83c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <R_DISTANCE+0x3>
 840:	20 e0       	ldi	r18, 0x00	; 0
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	40 e2       	ldi	r20, 0x20	; 32
 846:	51 e4       	ldi	r21, 0x41	; 65
 848:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpsf2>
 84c:	88 23       	and	r24, r24
 84e:	2c f4       	brge	.+10     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	{ BACKWORD(); RETURN_180(); }
 850:	0e 94 0d 01 	call	0x21a	; 0x21a <BACKWORD>
 854:	0e 94 31 01 	call	0x262	; 0x262 <RETURN_180>
 858:	21 c0       	rjmp	.+66     	; 0x89c <__stack+0x3d>
	else if (L_DISTANCE > R_DISTANCE)
 85a:	80 90 72 00 	lds	r8, 0x0072	; 0x800072 <R_DISTANCE>
 85e:	90 90 73 00 	lds	r9, 0x0073	; 0x800073 <R_DISTANCE+0x1>
 862:	a0 90 74 00 	lds	r10, 0x0074	; 0x800074 <R_DISTANCE+0x2>
 866:	b0 90 75 00 	lds	r11, 0x0075	; 0x800075 <R_DISTANCE+0x3>
 86a:	a5 01       	movw	r20, r10
 86c:	94 01       	movw	r18, r8
 86e:	c7 01       	movw	r24, r14
 870:	b6 01       	movw	r22, r12
 872:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__gesf2>
 876:	18 16       	cp	r1, r24
 878:	2c f4       	brge	.+10     	; 0x884 <__stack+0x25>
	{ BACKWORD(); TURN_LEFT(); }
 87a:	0e 94 0d 01 	call	0x21a	; 0x21a <BACKWORD>
 87e:	0e 94 9b 01 	call	0x336	; 0x336 <TURN_LEFT>
 882:	0c c0       	rjmp	.+24     	; 0x89c <__stack+0x3d>
	else if (R_DISTANCE > L_DISTANCE)
 884:	a5 01       	movw	r20, r10
 886:	94 01       	movw	r18, r8
 888:	c7 01       	movw	r24, r14
 88a:	b6 01       	movw	r22, r12
 88c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpsf2>
 890:	88 23       	and	r24, r24
 892:	24 f4       	brge	.+8      	; 0x89c <__stack+0x3d>
	{ BACKWORD(); TURN_RIGHT(); }
 894:	0e 94 0d 01 	call	0x21a	; 0x21a <BACKWORD>
 898:	0e 94 66 01 	call	0x2cc	; 0x2cc <TURN_RIGHT>
}
 89c:	ff 90       	pop	r15
 89e:	ef 90       	pop	r14
 8a0:	df 90       	pop	r13
 8a2:	cf 90       	pop	r12
 8a4:	bf 90       	pop	r11
 8a6:	af 90       	pop	r10
 8a8:	9f 90       	pop	r9
 8aa:	8f 90       	pop	r8
 8ac:	08 95       	ret

000008ae <main>:
}


int main(void)
{
	DIO_voidInit();
 8ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidInit>
	LCD_voidInit();
 8b2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_voidInit>
	TIMER0_void_Init();
 8b6:	0e 94 b8 04 	call	0x970	; 0x970 <TIMER0_void_Init>
	TIMER1_voidOvInt();  // Enable Timer1 overflow interrupts
 8ba:	0e 94 b2 04 	call	0x964	; 0x964 <TIMER1_voidOvInt>
	UART_voidInit();
 8be:	0e 94 2c 05 	call	0xa58	; 0xa58 <UART_voidInit>
	GIE_voidEnable();   // Enable global interrupt
 8c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <GIE_voidEnable>
	
	u8 resieve ;
	resieve = UART_u8ReceiveByte();
 8c6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <UART_u8ReceiveByte>
 8ca:	c8 2f       	mov	r28, r24
	
	LCD_voidClear();
 8cc:	0e 94 41 03 	call	0x682	; 0x682 <LCD_voidClear>
	LCD_voidSetCursor( LCD_U8_LINE1 , 5 );
 8d0:	65 e0       	ldi	r22, 0x05	; 5
 8d2:	80 e8       	ldi	r24, 0x80	; 128
 8d4:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD_voidSetCursor>
	LCD_voidSendString("MAGNAM");
 8d8:	80 e6       	ldi	r24, 0x60	; 96
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_voidSendString>
	while(1)
	{
		if (resieve == 'a' )
 8e0:	c1 36       	cpi	r28, 0x61	; 97
 8e2:	f1 f7       	brne	.-4      	; 0x8e0 <main+0x32>
		{
			GO_FORWARD();
 8e4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <GO_FORWARD>
			
			Distance_1 = ULTRASONIC_f64Distance();
 8e8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ULTRASONIC_f64Distance>
 8ec:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <Distance_1>
 8f0:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <Distance_1+0x1>
 8f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Distance_1+0x2>
 8f8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Distance_1+0x3>
 8fc:	2f ef       	ldi	r18, 0xFF	; 255
 8fe:	81 ee       	ldi	r24, 0xE1	; 225
 900:	94 e0       	ldi	r25, 0x04	; 4
 902:	21 50       	subi	r18, 0x01	; 1
 904:	80 40       	sbci	r24, 0x00	; 0
 906:	90 40       	sbci	r25, 0x00	; 0
 908:	e1 f7       	brne	.-8      	; 0x902 <main+0x54>
 90a:	00 c0       	rjmp	.+0      	; 0x90c <main+0x5e>
 90c:	00 00       	nop
			_delay_ms(100);
			Distance_2 = ULTRASONIC_f64Distance();
 90e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ULTRASONIC_f64Distance>
 912:	6b 01       	movw	r12, r22
 914:	7c 01       	movw	r14, r24
 916:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <Distance_2>
 91a:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <Distance_2+0x1>
 91e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Distance_2+0x2>
 922:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Distance_2+0x3>
			
			if( (Distance_1 < 25.0000 ) && ( Distance_2 < 25.0000) )
 926:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <Distance_1>
 92a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <Distance_1+0x1>
 92e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Distance_1+0x2>
 932:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Distance_1+0x3>
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	48 ec       	ldi	r20, 0xC8	; 200
 93c:	51 e4       	ldi	r21, 0x41	; 65
 93e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpsf2>
 942:	88 23       	and	r24, r24
 944:	6c f6       	brge	.-102    	; 0x8e0 <main+0x32>
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	48 ec       	ldi	r20, 0xC8	; 200
 94c:	51 e4       	ldi	r21, 0x41	; 65
 94e:	c7 01       	movw	r24, r14
 950:	b6 01       	movw	r22, r12
 952:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__cmpsf2>
 956:	88 23       	and	r24, r24
 958:	1c f6       	brge	.-122    	; 0x8e0 <main+0x32>
			{
				STOP();
 95a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <STOP>
				CHECK();
 95e:	0e 94 c3 03 	call	0x786	; 0x786 <CHECK>
 962:	be cf       	rjmp	.-132    	; 0x8e0 <main+0x32>

00000964 <TIMER1_voidOvInt>:
	
}

void TIMER1_voidOvInt(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
 964:	89 b3       	in	r24, 0x19	; 25
 966:	9a b3       	in	r25, 0x1a	; 26
 968:	84 60       	ori	r24, 0x04	; 4
 96a:	9a bb       	out	0x1a, r25	; 26
 96c:	89 bb       	out	0x19, r24	; 25
 96e:	08 95       	ret

00000970 <TIMER0_void_Init>:
	TIMER0_OV_CallBack = Copy_ptr ;
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 970:	83 b7       	in	r24, 0x33	; 51
 972:	80 64       	ori	r24, 0x40	; 64
 974:	83 bf       	out	0x33, r24	; 51
 976:	83 b7       	in	r24, 0x33	; 51
 978:	88 60       	ori	r24, 0x08	; 8
 97a:	83 bf       	out	0x33, r24	; 51
 97c:	83 b7       	in	r24, 0x33	; 51
 97e:	81 60       	ori	r24, 0x01	; 1
 980:	83 bf       	out	0x33, r24	; 51
 982:	83 b7       	in	r24, 0x33	; 51
 984:	8d 7f       	andi	r24, 0xFD	; 253
 986:	83 bf       	out	0x33, r24	; 51
 988:	83 b7       	in	r24, 0x33	; 51
 98a:	84 60       	ori	r24, 0x04	; 4
 98c:	83 bf       	out	0x33, r24	; 51
 98e:	83 b7       	in	r24, 0x33	; 51
 990:	8f 7e       	andi	r24, 0xEF	; 239
 992:	83 bf       	out	0x33, r24	; 51
 994:	83 b7       	in	r24, 0x33	; 51
 996:	80 62       	ori	r24, 0x20	; 32
 998:	83 bf       	out	0x33, r24	; 51
 99a:	89 b7       	in	r24, 0x39	; 57
 99c:	8e 7f       	andi	r24, 0xFE	; 254
 99e:	89 bf       	out	0x39, r24	; 57
 9a0:	89 b7       	in	r24, 0x39	; 57
 9a2:	8d 7f       	andi	r24, 0xFD	; 253
 9a4:	89 bf       	out	0x39, r24	; 57
 9a6:	88 b7       	in	r24, 0x38	; 56
 9a8:	81 60       	ori	r24, 0x01	; 1
 9aa:	88 bf       	out	0x38, r24	; 56
 9ac:	88 b7       	in	r24, 0x38	; 56
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	88 bf       	out	0x38, r24	; 56
 9b2:	12 be       	out	0x32, r1	; 50
 9b4:	1c be       	out	0x3c, r1	; 60
 9b6:	08 95       	ret

000009b8 <TIMER0_void_SetCompareVal>:
 9b8:	8c bf       	out	0x3c, r24	; 60
 9ba:	08 95       	ret

000009bc <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used)); // for avr gcc
void __vector_11(void)
{
 9bc:	1f 92       	push	r1
 9be:	0f 92       	push	r0
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	0f 92       	push	r0
 9c4:	11 24       	eor	r1, r1
 9c6:	2f 93       	push	r18
 9c8:	3f 93       	push	r19
 9ca:	4f 93       	push	r20
 9cc:	5f 93       	push	r21
 9ce:	6f 93       	push	r22
 9d0:	7f 93       	push	r23
 9d2:	8f 93       	push	r24
 9d4:	9f 93       	push	r25
 9d6:	af 93       	push	r26
 9d8:	bf 93       	push	r27
 9da:	ef 93       	push	r30
 9dc:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 9de:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIMER0_OV_CallBack>
 9e2:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIMER0_OV_CallBack+0x1>
 9e6:	09 95       	icall
}
 9e8:	ff 91       	pop	r31
 9ea:	ef 91       	pop	r30
 9ec:	bf 91       	pop	r27
 9ee:	af 91       	pop	r26
 9f0:	9f 91       	pop	r25
 9f2:	8f 91       	pop	r24
 9f4:	7f 91       	pop	r23
 9f6:	6f 91       	pop	r22
 9f8:	5f 91       	pop	r21
 9fa:	4f 91       	pop	r20
 9fc:	3f 91       	pop	r19
 9fe:	2f 91       	pop	r18
 a00:	0f 90       	pop	r0
 a02:	0f be       	out	0x3f, r0	; 63
 a04:	0f 90       	pop	r0
 a06:	1f 90       	pop	r1
 a08:	18 95       	reti

00000a0a <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
	TIMER0_CTC_CallBack();
 a2c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIMER0_CTC_CallBack>
 a30:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIMER0_CTC_CallBack+0x1>
 a34:	09 95       	icall
}
 a36:	ff 91       	pop	r31
 a38:	ef 91       	pop	r30
 a3a:	bf 91       	pop	r27
 a3c:	af 91       	pop	r26
 a3e:	9f 91       	pop	r25
 a40:	8f 91       	pop	r24
 a42:	7f 91       	pop	r23
 a44:	6f 91       	pop	r22
 a46:	5f 91       	pop	r21
 a48:	4f 91       	pop	r20
 a4a:	3f 91       	pop	r19
 a4c:	2f 91       	pop	r18
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <UART_voidInit>:
}

void UART_voidSendByte(u8 Byte)
{
	while(GET_BIT(UCSRA , UDRE) == 0); // stuck here to check if flag is one to sure the UDR is empty
	UDR = Byte ;
 a58:	8a b1       	in	r24, 0x0a	; 10
 a5a:	8b 7f       	andi	r24, 0xFB	; 251
 a5c:	8a b9       	out	0x0a, r24	; 10
 a5e:	80 b5       	in	r24, 0x20	; 32
 a60:	84 60       	ori	r24, 0x04	; 4
 a62:	80 bd       	out	0x20, r24	; 32
 a64:	80 b5       	in	r24, 0x20	; 32
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	80 bd       	out	0x20, r24	; 32
 a6a:	80 b5       	in	r24, 0x20	; 32
 a6c:	8f 7b       	andi	r24, 0xBF	; 191
 a6e:	80 bd       	out	0x20, r24	; 32
 a70:	80 b5       	in	r24, 0x20	; 32
 a72:	8f 7d       	andi	r24, 0xDF	; 223
 a74:	80 bd       	out	0x20, r24	; 32
 a76:	80 b5       	in	r24, 0x20	; 32
 a78:	8f 7e       	andi	r24, 0xEF	; 239
 a7a:	80 bd       	out	0x20, r24	; 32
 a7c:	80 b5       	in	r24, 0x20	; 32
 a7e:	87 7f       	andi	r24, 0xF7	; 247
 a80:	80 bd       	out	0x20, r24	; 32
 a82:	80 b5       	in	r24, 0x20	; 32
 a84:	8e 7f       	andi	r24, 0xFE	; 254
 a86:	80 bd       	out	0x20, r24	; 32
 a88:	10 bc       	out	0x20, r1	; 32
 a8a:	87 e6       	ldi	r24, 0x67	; 103
 a8c:	89 b9       	out	0x09, r24	; 9
 a8e:	8a b1       	in	r24, 0x0a	; 10
 a90:	80 61       	ori	r24, 0x10	; 16
 a92:	8a b9       	out	0x0a, r24	; 10
 a94:	8a b1       	in	r24, 0x0a	; 10
 a96:	88 60       	ori	r24, 0x08	; 8
 a98:	8a b9       	out	0x0a, r24	; 10
 a9a:	8a b1       	in	r24, 0x0a	; 10
 a9c:	8f 77       	andi	r24, 0x7F	; 127
 a9e:	8a b9       	out	0x0a, r24	; 10
 aa0:	8a b1       	in	r24, 0x0a	; 10
 aa2:	8f 7d       	andi	r24, 0xDF	; 223
 aa4:	8a b9       	out	0x0a, r24	; 10
 aa6:	08 95       	ret

00000aa8 <UART_u8ReceiveByte>:
}

u8 UART_u8ReceiveByte(void)
{

	while(GET_BIT(UCSRA , RXC) == 0);
 aa8:	5f 9b       	sbis	0x0b, 7	; 11
 aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <UART_u8ReceiveByte>
	return UDR ;
 aac:	8c b1       	in	r24, 0x0c	; 12

}
 aae:	08 95       	ret

00000ab0 <__vector_13>:


void __vector_13(void) __attribute__((signal , used));
void __vector_13(void)
{
 ab0:	1f 92       	push	r1
 ab2:	0f 92       	push	r0
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	0f 92       	push	r0
 ab8:	11 24       	eor	r1, r1
 aba:	2f 93       	push	r18
 abc:	3f 93       	push	r19
 abe:	4f 93       	push	r20
 ac0:	5f 93       	push	r21
 ac2:	6f 93       	push	r22
 ac4:	7f 93       	push	r23
 ac6:	8f 93       	push	r24
 ac8:	9f 93       	push	r25
 aca:	af 93       	push	r26
 acc:	bf 93       	push	r27
 ace:	ef 93       	push	r30
 ad0:	ff 93       	push	r31
	CallBackReceive();
 ad2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <CallBackReceive>
 ad6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <CallBackReceive+0x1>
 ada:	09 95       	icall
}
 adc:	ff 91       	pop	r31
 ade:	ef 91       	pop	r30
 ae0:	bf 91       	pop	r27
 ae2:	af 91       	pop	r26
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	7f 91       	pop	r23
 aea:	6f 91       	pop	r22
 aec:	5f 91       	pop	r21
 aee:	4f 91       	pop	r20
 af0:	3f 91       	pop	r19
 af2:	2f 91       	pop	r18
 af4:	0f 90       	pop	r0
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	0f 90       	pop	r0
 afa:	1f 90       	pop	r1
 afc:	18 95       	reti

00000afe <__vector_14>:

void __vector_14(void) __attribute__((signal , used));
void __vector_14(void)
{
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	2f 93       	push	r18
 b0a:	3f 93       	push	r19
 b0c:	4f 93       	push	r20
 b0e:	5f 93       	push	r21
 b10:	6f 93       	push	r22
 b12:	7f 93       	push	r23
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	af 93       	push	r26
 b1a:	bf 93       	push	r27
 b1c:	ef 93       	push	r30
 b1e:	ff 93       	push	r31
	CallBackSend();
 b20:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <CallBackSend>
 b24:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <CallBackSend+0x1>
 b28:	09 95       	icall
}
 b2a:	ff 91       	pop	r31
 b2c:	ef 91       	pop	r30
 b2e:	bf 91       	pop	r27
 b30:	af 91       	pop	r26
 b32:	9f 91       	pop	r25
 b34:	8f 91       	pop	r24
 b36:	7f 91       	pop	r23
 b38:	6f 91       	pop	r22
 b3a:	5f 91       	pop	r21
 b3c:	4f 91       	pop	r20
 b3e:	3f 91       	pop	r19
 b40:	2f 91       	pop	r18
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

00000b4c <__cmpsf2>:
 b4c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_cmp>
 b50:	08 f4       	brcc	.+2      	; 0xb54 <__cmpsf2+0x8>
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	08 95       	ret

00000b56 <__divsf3>:
 b56:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__divsf3x>
 b5a:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_round>
 b5e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_pscB>
 b62:	58 f0       	brcs	.+22     	; 0xb7a <__divsf3+0x24>
 b64:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_pscA>
 b68:	40 f0       	brcs	.+16     	; 0xb7a <__divsf3+0x24>
 b6a:	29 f4       	brne	.+10     	; 0xb76 <__divsf3+0x20>
 b6c:	5f 3f       	cpi	r21, 0xFF	; 255
 b6e:	29 f0       	breq	.+10     	; 0xb7a <__divsf3+0x24>
 b70:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 b74:	51 11       	cpse	r21, r1
 b76:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_szero>
 b7a:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_nan>

00000b7e <__divsf3x>:
 b7e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_split3>
 b82:	68 f3       	brcs	.-38     	; 0xb5e <__divsf3+0x8>

00000b84 <__divsf3_pse>:
 b84:	99 23       	and	r25, r25
 b86:	b1 f3       	breq	.-20     	; 0xb74 <__divsf3+0x1e>
 b88:	55 23       	and	r21, r21
 b8a:	91 f3       	breq	.-28     	; 0xb70 <__divsf3+0x1a>
 b8c:	95 1b       	sub	r25, r21
 b8e:	55 0b       	sbc	r21, r21
 b90:	bb 27       	eor	r27, r27
 b92:	aa 27       	eor	r26, r26
 b94:	62 17       	cp	r22, r18
 b96:	73 07       	cpc	r23, r19
 b98:	84 07       	cpc	r24, r20
 b9a:	38 f0       	brcs	.+14     	; 0xbaa <__divsf3_pse+0x26>
 b9c:	9f 5f       	subi	r25, 0xFF	; 255
 b9e:	5f 4f       	sbci	r21, 0xFF	; 255
 ba0:	22 0f       	add	r18, r18
 ba2:	33 1f       	adc	r19, r19
 ba4:	44 1f       	adc	r20, r20
 ba6:	aa 1f       	adc	r26, r26
 ba8:	a9 f3       	breq	.-22     	; 0xb94 <__divsf3_pse+0x10>
 baa:	35 d0       	rcall	.+106    	; 0xc16 <__divsf3_pse+0x92>
 bac:	0e 2e       	mov	r0, r30
 bae:	3a f0       	brmi	.+14     	; 0xbbe <__divsf3_pse+0x3a>
 bb0:	e0 e8       	ldi	r30, 0x80	; 128
 bb2:	32 d0       	rcall	.+100    	; 0xc18 <__divsf3_pse+0x94>
 bb4:	91 50       	subi	r25, 0x01	; 1
 bb6:	50 40       	sbci	r21, 0x00	; 0
 bb8:	e6 95       	lsr	r30
 bba:	00 1c       	adc	r0, r0
 bbc:	ca f7       	brpl	.-14     	; 0xbb0 <__divsf3_pse+0x2c>
 bbe:	2b d0       	rcall	.+86     	; 0xc16 <__divsf3_pse+0x92>
 bc0:	fe 2f       	mov	r31, r30
 bc2:	29 d0       	rcall	.+82     	; 0xc16 <__divsf3_pse+0x92>
 bc4:	66 0f       	add	r22, r22
 bc6:	77 1f       	adc	r23, r23
 bc8:	88 1f       	adc	r24, r24
 bca:	bb 1f       	adc	r27, r27
 bcc:	26 17       	cp	r18, r22
 bce:	37 07       	cpc	r19, r23
 bd0:	48 07       	cpc	r20, r24
 bd2:	ab 07       	cpc	r26, r27
 bd4:	b0 e8       	ldi	r27, 0x80	; 128
 bd6:	09 f0       	breq	.+2      	; 0xbda <__divsf3_pse+0x56>
 bd8:	bb 0b       	sbc	r27, r27
 bda:	80 2d       	mov	r24, r0
 bdc:	bf 01       	movw	r22, r30
 bde:	ff 27       	eor	r31, r31
 be0:	93 58       	subi	r25, 0x83	; 131
 be2:	5f 4f       	sbci	r21, 0xFF	; 255
 be4:	3a f0       	brmi	.+14     	; 0xbf4 <__divsf3_pse+0x70>
 be6:	9e 3f       	cpi	r25, 0xFE	; 254
 be8:	51 05       	cpc	r21, r1
 bea:	78 f0       	brcs	.+30     	; 0xc0a <__divsf3_pse+0x86>
 bec:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_inf>
 bf0:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_szero>
 bf4:	5f 3f       	cpi	r21, 0xFF	; 255
 bf6:	e4 f3       	brlt	.-8      	; 0xbf0 <__divsf3_pse+0x6c>
 bf8:	98 3e       	cpi	r25, 0xE8	; 232
 bfa:	d4 f3       	brlt	.-12     	; 0xbf0 <__divsf3_pse+0x6c>
 bfc:	86 95       	lsr	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	b7 95       	ror	r27
 c04:	f7 95       	ror	r31
 c06:	9f 5f       	subi	r25, 0xFF	; 255
 c08:	c9 f7       	brne	.-14     	; 0xbfc <__divsf3_pse+0x78>
 c0a:	88 0f       	add	r24, r24
 c0c:	91 1d       	adc	r25, r1
 c0e:	96 95       	lsr	r25
 c10:	87 95       	ror	r24
 c12:	97 f9       	bld	r25, 7
 c14:	08 95       	ret
 c16:	e1 e0       	ldi	r30, 0x01	; 1
 c18:	66 0f       	add	r22, r22
 c1a:	77 1f       	adc	r23, r23
 c1c:	88 1f       	adc	r24, r24
 c1e:	bb 1f       	adc	r27, r27
 c20:	62 17       	cp	r22, r18
 c22:	73 07       	cpc	r23, r19
 c24:	84 07       	cpc	r24, r20
 c26:	ba 07       	cpc	r27, r26
 c28:	20 f0       	brcs	.+8      	; 0xc32 <__divsf3_pse+0xae>
 c2a:	62 1b       	sub	r22, r18
 c2c:	73 0b       	sbc	r23, r19
 c2e:	84 0b       	sbc	r24, r20
 c30:	ba 0b       	sbc	r27, r26
 c32:	ee 1f       	adc	r30, r30
 c34:	88 f7       	brcc	.-30     	; 0xc18 <__divsf3_pse+0x94>
 c36:	e0 95       	com	r30
 c38:	08 95       	ret

00000c3a <__floatunsisf>:
 c3a:	e8 94       	clt
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <__floatsisf+0x12>

00000c3e <__floatsisf>:
 c3e:	97 fb       	bst	r25, 7
 c40:	3e f4       	brtc	.+14     	; 0xc50 <__floatsisf+0x12>
 c42:	90 95       	com	r25
 c44:	80 95       	com	r24
 c46:	70 95       	com	r23
 c48:	61 95       	neg	r22
 c4a:	7f 4f       	sbci	r23, 0xFF	; 255
 c4c:	8f 4f       	sbci	r24, 0xFF	; 255
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	99 23       	and	r25, r25
 c52:	a9 f0       	breq	.+42     	; 0xc7e <__floatsisf+0x40>
 c54:	f9 2f       	mov	r31, r25
 c56:	96 e9       	ldi	r25, 0x96	; 150
 c58:	bb 27       	eor	r27, r27
 c5a:	93 95       	inc	r25
 c5c:	f6 95       	lsr	r31
 c5e:	87 95       	ror	r24
 c60:	77 95       	ror	r23
 c62:	67 95       	ror	r22
 c64:	b7 95       	ror	r27
 c66:	f1 11       	cpse	r31, r1
 c68:	f8 cf       	rjmp	.-16     	; 0xc5a <__floatsisf+0x1c>
 c6a:	fa f4       	brpl	.+62     	; 0xcaa <__floatsisf+0x6c>
 c6c:	bb 0f       	add	r27, r27
 c6e:	11 f4       	brne	.+4      	; 0xc74 <__floatsisf+0x36>
 c70:	60 ff       	sbrs	r22, 0
 c72:	1b c0       	rjmp	.+54     	; 0xcaa <__floatsisf+0x6c>
 c74:	6f 5f       	subi	r22, 0xFF	; 255
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	16 c0       	rjmp	.+44     	; 0xcaa <__floatsisf+0x6c>
 c7e:	88 23       	and	r24, r24
 c80:	11 f0       	breq	.+4      	; 0xc86 <__floatsisf+0x48>
 c82:	96 e9       	ldi	r25, 0x96	; 150
 c84:	11 c0       	rjmp	.+34     	; 0xca8 <__floatsisf+0x6a>
 c86:	77 23       	and	r23, r23
 c88:	21 f0       	breq	.+8      	; 0xc92 <__floatsisf+0x54>
 c8a:	9e e8       	ldi	r25, 0x8E	; 142
 c8c:	87 2f       	mov	r24, r23
 c8e:	76 2f       	mov	r23, r22
 c90:	05 c0       	rjmp	.+10     	; 0xc9c <__floatsisf+0x5e>
 c92:	66 23       	and	r22, r22
 c94:	71 f0       	breq	.+28     	; 0xcb2 <__floatsisf+0x74>
 c96:	96 e8       	ldi	r25, 0x86	; 134
 c98:	86 2f       	mov	r24, r22
 c9a:	70 e0       	ldi	r23, 0x00	; 0
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	2a f0       	brmi	.+10     	; 0xcaa <__floatsisf+0x6c>
 ca0:	9a 95       	dec	r25
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	da f7       	brpl	.-10     	; 0xca0 <__floatsisf+0x62>
 caa:	88 0f       	add	r24, r24
 cac:	96 95       	lsr	r25
 cae:	87 95       	ror	r24
 cb0:	97 f9       	bld	r25, 7
 cb2:	08 95       	ret

00000cb4 <__fp_cmp>:
 cb4:	99 0f       	add	r25, r25
 cb6:	00 08       	sbc	r0, r0
 cb8:	55 0f       	add	r21, r21
 cba:	aa 0b       	sbc	r26, r26
 cbc:	e0 e8       	ldi	r30, 0x80	; 128
 cbe:	fe ef       	ldi	r31, 0xFE	; 254
 cc0:	16 16       	cp	r1, r22
 cc2:	17 06       	cpc	r1, r23
 cc4:	e8 07       	cpc	r30, r24
 cc6:	f9 07       	cpc	r31, r25
 cc8:	c0 f0       	brcs	.+48     	; 0xcfa <__fp_cmp+0x46>
 cca:	12 16       	cp	r1, r18
 ccc:	13 06       	cpc	r1, r19
 cce:	e4 07       	cpc	r30, r20
 cd0:	f5 07       	cpc	r31, r21
 cd2:	98 f0       	brcs	.+38     	; 0xcfa <__fp_cmp+0x46>
 cd4:	62 1b       	sub	r22, r18
 cd6:	73 0b       	sbc	r23, r19
 cd8:	84 0b       	sbc	r24, r20
 cda:	95 0b       	sbc	r25, r21
 cdc:	39 f4       	brne	.+14     	; 0xcec <__fp_cmp+0x38>
 cde:	0a 26       	eor	r0, r26
 ce0:	61 f0       	breq	.+24     	; 0xcfa <__fp_cmp+0x46>
 ce2:	23 2b       	or	r18, r19
 ce4:	24 2b       	or	r18, r20
 ce6:	25 2b       	or	r18, r21
 ce8:	21 f4       	brne	.+8      	; 0xcf2 <__fp_cmp+0x3e>
 cea:	08 95       	ret
 cec:	0a 26       	eor	r0, r26
 cee:	09 f4       	brne	.+2      	; 0xcf2 <__fp_cmp+0x3e>
 cf0:	a1 40       	sbci	r26, 0x01	; 1
 cf2:	a6 95       	lsr	r26
 cf4:	8f ef       	ldi	r24, 0xFF	; 255
 cf6:	81 1d       	adc	r24, r1
 cf8:	81 1d       	adc	r24, r1
 cfa:	08 95       	ret

00000cfc <__fp_inf>:
 cfc:	97 f9       	bld	r25, 7
 cfe:	9f 67       	ori	r25, 0x7F	; 127
 d00:	80 e8       	ldi	r24, 0x80	; 128
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	60 e0       	ldi	r22, 0x00	; 0
 d06:	08 95       	ret

00000d08 <__fp_nan>:
 d08:	9f ef       	ldi	r25, 0xFF	; 255
 d0a:	80 ec       	ldi	r24, 0xC0	; 192
 d0c:	08 95       	ret

00000d0e <__fp_pscA>:
 d0e:	00 24       	eor	r0, r0
 d10:	0a 94       	dec	r0
 d12:	16 16       	cp	r1, r22
 d14:	17 06       	cpc	r1, r23
 d16:	18 06       	cpc	r1, r24
 d18:	09 06       	cpc	r0, r25
 d1a:	08 95       	ret

00000d1c <__fp_pscB>:
 d1c:	00 24       	eor	r0, r0
 d1e:	0a 94       	dec	r0
 d20:	12 16       	cp	r1, r18
 d22:	13 06       	cpc	r1, r19
 d24:	14 06       	cpc	r1, r20
 d26:	05 06       	cpc	r0, r21
 d28:	08 95       	ret

00000d2a <__fp_round>:
 d2a:	09 2e       	mov	r0, r25
 d2c:	03 94       	inc	r0
 d2e:	00 0c       	add	r0, r0
 d30:	11 f4       	brne	.+4      	; 0xd36 <__fp_round+0xc>
 d32:	88 23       	and	r24, r24
 d34:	52 f0       	brmi	.+20     	; 0xd4a <__fp_round+0x20>
 d36:	bb 0f       	add	r27, r27
 d38:	40 f4       	brcc	.+16     	; 0xd4a <__fp_round+0x20>
 d3a:	bf 2b       	or	r27, r31
 d3c:	11 f4       	brne	.+4      	; 0xd42 <__fp_round+0x18>
 d3e:	60 ff       	sbrs	r22, 0
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <__fp_round+0x20>
 d42:	6f 5f       	subi	r22, 0xFF	; 255
 d44:	7f 4f       	sbci	r23, 0xFF	; 255
 d46:	8f 4f       	sbci	r24, 0xFF	; 255
 d48:	9f 4f       	sbci	r25, 0xFF	; 255
 d4a:	08 95       	ret

00000d4c <__fp_split3>:
 d4c:	57 fd       	sbrc	r21, 7
 d4e:	90 58       	subi	r25, 0x80	; 128
 d50:	44 0f       	add	r20, r20
 d52:	55 1f       	adc	r21, r21
 d54:	59 f0       	breq	.+22     	; 0xd6c <__fp_splitA+0x10>
 d56:	5f 3f       	cpi	r21, 0xFF	; 255
 d58:	71 f0       	breq	.+28     	; 0xd76 <__fp_splitA+0x1a>
 d5a:	47 95       	ror	r20

00000d5c <__fp_splitA>:
 d5c:	88 0f       	add	r24, r24
 d5e:	97 fb       	bst	r25, 7
 d60:	99 1f       	adc	r25, r25
 d62:	61 f0       	breq	.+24     	; 0xd7c <__fp_splitA+0x20>
 d64:	9f 3f       	cpi	r25, 0xFF	; 255
 d66:	79 f0       	breq	.+30     	; 0xd86 <__fp_splitA+0x2a>
 d68:	87 95       	ror	r24
 d6a:	08 95       	ret
 d6c:	12 16       	cp	r1, r18
 d6e:	13 06       	cpc	r1, r19
 d70:	14 06       	cpc	r1, r20
 d72:	55 1f       	adc	r21, r21
 d74:	f2 cf       	rjmp	.-28     	; 0xd5a <__fp_split3+0xe>
 d76:	46 95       	lsr	r20
 d78:	f1 df       	rcall	.-30     	; 0xd5c <__fp_splitA>
 d7a:	08 c0       	rjmp	.+16     	; 0xd8c <__fp_splitA+0x30>
 d7c:	16 16       	cp	r1, r22
 d7e:	17 06       	cpc	r1, r23
 d80:	18 06       	cpc	r1, r24
 d82:	99 1f       	adc	r25, r25
 d84:	f1 cf       	rjmp	.-30     	; 0xd68 <__fp_splitA+0xc>
 d86:	86 95       	lsr	r24
 d88:	71 05       	cpc	r23, r1
 d8a:	61 05       	cpc	r22, r1
 d8c:	08 94       	sec
 d8e:	08 95       	ret

00000d90 <__fp_zero>:
 d90:	e8 94       	clt

00000d92 <__fp_szero>:
 d92:	bb 27       	eor	r27, r27
 d94:	66 27       	eor	r22, r22
 d96:	77 27       	eor	r23, r23
 d98:	cb 01       	movw	r24, r22
 d9a:	97 f9       	bld	r25, 7
 d9c:	08 95       	ret

00000d9e <__gesf2>:
 d9e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_cmp>
 da2:	08 f4       	brcc	.+2      	; 0xda6 <__gesf2+0x8>
 da4:	8f ef       	ldi	r24, 0xFF	; 255
 da6:	08 95       	ret

00000da8 <_exit>:
 da8:	f8 94       	cli

00000daa <__stop_program>:
 daa:	ff cf       	rjmp	.-2      	; 0xdaa <__stop_program>
